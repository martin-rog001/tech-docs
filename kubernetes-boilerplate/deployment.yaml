# Kubernetes Deployment - Essential Syntax Reference
apiVersion: apps/v1
kind: Deployment

metadata:
  # Name of the deployment
  name: web-app-deployment

  # Namespace (optional, defaults to "default")
  namespace: production

  # Labels for organization
  labels:
    app: web-app
    tier: frontend
    version: v1.0.0

  # Annotations for additional metadata
  annotations:
    description: "Web application deployment"
    maintainer: "your-email@example.com"

spec:
  # Number of pod replicas
  replicas: 3

  # Selector to match pods
  selector:
    matchLabels:
      app: web-app
      tier: frontend

  # Deployment strategy
  strategy:
    type: RollingUpdate
    # Alternative: Recreate
    rollingUpdate:
      maxSurge: 1        # Max pods over desired count
      maxUnavailable: 1  # Max pods unavailable during update

  # Minimum seconds for pod to be ready
  minReadySeconds: 10

  # Revision history limit
  revisionHistoryLimit: 10

  # Pod template
  template:
    metadata:
      labels:
        app: web-app
        tier: frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"

    spec:
      # Service account
      serviceAccountName: web-app-sa

      # Security context for all containers
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000

      # Init containers (run before main containers)
      initContainers:
        - name: init-database
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for database..."
              until nc -z db-service 5432; do
                sleep 2
              done
              echo "Database is ready!"

      # Main containers
      containers:
        - name: web-app
          image: myapp:1.0.0
          imagePullPolicy: IfNotPresent
          # Options: Always, Never, IfNotPresent

          # Container ports
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP

          # Environment variables
          env:
            # Simple value
            - name: NODE_ENV
              value: "production"

            # From ConfigMap
            - name: APP_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: config.json

            # From Secret
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: password

            # Field references
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

          # Environment from ConfigMap/Secret
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secrets

          # Resource requests and limits
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"

          # Liveness probe (restart if fails)
          livenessProbe:
            httpGet:
              path: /health
              port: http
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          # Readiness probe (remove from service if fails)
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3

          # Startup probe (for slow starting containers)
          startupProbe:
            httpGet:
              path: /startup
              port: http
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 30

          # Volume mounts
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true

            - name: data-volume
              mountPath: /app/data

            - name: secret-volume
              mountPath: /app/secrets
              readOnly: true

            - name: cache-volume
              mountPath: /app/cache

          # Lifecycle hooks
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "echo Container started > /tmp/started"]
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]

          # Security context (container level)
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          # Command and args override
          # command: ["/bin/sh"]
          # args: ["-c", "node server.js"]

          # Working directory
          # workingDir: /app

        # Sidecar container example
        - name: log-forwarder
          image: fluent/fluent-bit:2.0
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          volumeMounts:
            - name: data-volume
              mountPath: /app/logs
              readOnly: true

      # Volumes
      volumes:
        # ConfigMap volume
        - name: config-volume
          configMap:
            name: app-config
            items:
              - key: config.json
                path: config.json

        # Secret volume
        - name: secret-volume
          secret:
            secretName: app-secrets
            defaultMode: 0400

        # PersistentVolumeClaim
        - name: data-volume
          persistentVolumeClaim:
            claimName: app-pvc

        # EmptyDir (temporary storage)
        - name: cache-volume
          emptyDir:
            sizeLimit: 500Mi

        # HostPath (not recommended for production)
        # - name: host-volume
        #   hostPath:
        #     path: /data
        #     type: Directory

      # Node selector
      nodeSelector:
        disktype: ssd
        environment: production

      # Affinity rules
      affinity:
        # Pod anti-affinity (spread pods)
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - web-app
                topologyKey: kubernetes.io/hostname

        # Node affinity
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-type
                    operator: In
                    values:
                      - worker

      # Tolerations (allow scheduling on tainted nodes)
      tolerations:
        - key: "dedicated"
          operator: "Equal"
          value: "web"
          effect: "NoSchedule"

      # DNS policy
      dnsPolicy: ClusterFirst
      # Options: Default, ClusterFirst, ClusterFirstWithHostNet, None

      # Restart policy
      restartPolicy: Always
      # Options: Always, OnFailure, Never

      # Termination grace period
      terminationGracePeriodSeconds: 30

      # Host network
      # hostNetwork: false

      # Priority class
      # priorityClassName: high-priority

      # Image pull secrets
      imagePullSecrets:
        - name: registry-credentials

---
# Example: Deployment with different probe types
apiVersion: apps/v1
kind: Deployment
metadata:
  name: probe-examples
spec:
  replicas: 2
  selector:
    matchLabels:
      app: probe-demo
  template:
    metadata:
      labels:
        app: probe-demo
    spec:
      containers:
        - name: app
          image: nginx:alpine
          ports:
            - containerPort: 80

          # TCP probe
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20

          # Exec probe
          readinessProbe:
            exec:
              command:
                - cat
                - /tmp/healthy
            initialDelaySeconds: 5
            periodSeconds: 5

          # gRPC probe
          # livenessProbe:
          #   grpc:
          #     port: 9090
          #   initialDelaySeconds: 10
