# Kubernetes Secret - Essential Syntax Reference
apiVersion: v1
kind: Secret

metadata:
  name: app-secrets
  namespace: production
  labels:
    app: web-app

# Secret type
type: Opaque
# Options: Opaque, kubernetes.io/service-account-token, kubernetes.io/dockercfg,
#          kubernetes.io/dockerconfigjson, kubernetes.io/basic-auth,
#          kubernetes.io/ssh-auth, kubernetes.io/tls, bootstrap.kubernetes.io/token

# Data (base64 encoded)
data:
  # Create with: echo -n "mypassword" | base64
  database-password: bXlwYXNzd29yZA==
  api-key: YXBpLWtleS0xMjM0NTY3ODkw
  secret-key: c2VjcmV0LWtleS1hYmNkZWZnaGlq

# String data (automatically base64 encoded)
stringData:
  # Plain text - Kubernetes will encode it
  username: "admin"
  password: "secretpassword123"
  config.json: |
    {
      "apiKey": "secret-api-key",
      "clientSecret": "client-secret-value"
    }

---
# Docker registry secret
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: production
type: kubernetes.io/dockerconfigjson
data:
  # Create with: kubectl create secret docker-registry registry-credentials \
  #   --docker-server=registry.example.com \
  #   --docker-username=user \
  #   --docker-password=password \
  #   --docker-email=user@example.com \
  #   --dry-run=client -o yaml
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3N3b3JkIiwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiYXV0aCI6ImRYTmxjanB3WVhOemQyOXlaQT09In19fQ==

---
# TLS secret
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: production
type: kubernetes.io/tls
data:
  # Create with: kubectl create secret tls tls-secret \
  #   --cert=path/to/tls.crt \
  #   --key=path/to/tls.key \
  #   --dry-run=client -o yaml
  tls.crt: LS0tLS1CRUdJTi...
  tls.key: LS0tLS1CRUdJTi...

---
# Basic auth secret
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
  namespace: production
type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: secretpassword

---
# SSH auth secret
apiVersion: v1
kind: Secret
metadata:
  name: ssh-key-secret
  namespace: production
type: kubernetes.io/ssh-auth
data:
  # Create with: cat ~/.ssh/id_rsa | base64
  ssh-privatekey: LS0tLS1CRUdJTi...

---
# Service account token secret
apiVersion: v1
kind: Secret
metadata:
  name: sa-token
  namespace: production
  annotations:
    kubernetes.io/service-account.name: web-app-sa
type: kubernetes.io/service-account-token

---
# Multiple secrets example
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: production
type: Opaque
stringData:
  # PostgreSQL
  postgres-user: "dbuser"
  postgres-password: "dbpassword"
  postgres-database: "mydb"

  # Connection string
  database-url: "postgresql://dbuser:dbpassword@db-service:5432/mydb"

  # Redis
  redis-password: "redispassword"

---
# External secrets example (using External Secrets Operator)
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: aws-secrets
#   namespace: production
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: aws-secretsmanager
#     kind: SecretStore
#   target:
#     name: app-secrets
#     creationPolicy: Owner
#   data:
#     - secretKey: database-password
#       remoteRef:
#         key: prod/database/password

---
# Usage Examples in Pods:

# 1. As environment variables
# env:
#   - name: DATABASE_PASSWORD
#     valueFrom:
#       secretKeyRef:
#         name: app-secrets
#         key: database-password

# 2. All keys as environment variables
# envFrom:
#   - secretRef:
#       name: app-secrets

# 3. As volume mount
# volumes:
#   - name: secrets
#     secret:
#       secretName: app-secrets
#       defaultMode: 0400
#       items:
#         - key: database-password
#           path: db-password
#
# volumeMounts:
#   - name: secrets
#     mountPath: /etc/secrets
#     readOnly: true

# 4. TLS secret in Ingress
# tls:
#   - hosts:
#       - example.com
#     secretName: tls-secret

# 5. Image pull secret
# imagePullSecrets:
#   - name: registry-credentials

---
# Commands to create secrets:

# From literal values
# kubectl create secret generic app-secrets \
#   --from-literal=username=admin \
#   --from-literal=password=secret123

# From files
# kubectl create secret generic app-secrets \
#   --from-file=ssh-key=~/.ssh/id_rsa \
#   --from-file=config.json

# From env file
# kubectl create secret generic app-secrets \
#   --from-env-file=.env

# Docker registry
# kubectl create secret docker-registry registry-creds \
#   --docker-server=registry.example.com \
#   --docker-username=user \
#   --docker-password=password

# TLS certificate
# kubectl create secret tls tls-secret \
#   --cert=tls.crt \
#   --key=tls.key

# View secret (base64 encoded)
# kubectl get secret app-secrets -o yaml

# Decode secret
# kubectl get secret app-secrets -o jsonpath='{.data.password}' | base64 -d
